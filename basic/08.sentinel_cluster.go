package redis

/*
哨兵集群：哨兵挂了，主从库还能切换吗？

概述
	一旦多个实例组成了哨兵集群，即使有哨兵实例出现故障挂掉了，其他哨兵还能继续协作完成主从库切换的工作
	包括判定主库是不是处于下线状态，选择新主库，以及通知从库和客户端
配置
	在配置哨兵的信息时，只需要用到下面的这个配置项，设置主库的 IP 和端口，并没有配置其他哨兵的连接信息
	sentinel monitor <master-name> <ip> <redis-port> <quorum>
	哨兵实例既然都不知道彼此的地址，又是怎么组成集群的呢？

基于 pub/sub 机制的哨兵集群组成
	pub/sub 机制：发布 / 订阅机制
		哨兵实例之间可以相互发现，要归功于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制
		哨兵只要和主库建立起了连接，就可以在主库上发布消息了，比如说发布它自己的连接信息（IP 和端口）
		同时，它也可以从主库上订阅消息，获得其他哨兵发布的连接信息
		当多个哨兵实例都在主库上做了发布和订阅操作后，它们之间就能知道彼此的 IP 地址和端口
		通过 pub/sub 机制，哨兵之间可以组成集群
	频道
		除了哨兵实例，我们自己编写的应用程序也可以通过 Redis 进行消息的发布和订阅
		所以，为了区分不同应用的消息，Redis 会以频道的形式，对这些消息进行分门别类的管理
		消息的类别：
			所谓的频道，实际上就是消息的类别
			当消息类别相同时，它们就属于同一个频道。反之，就属于不同的频道
			只有订阅了同一个频道的应用，才能通过发布的消息进行信息交换
	示例：08.sentinel_cluster_demo.jpg
		集群
			哨兵 1 把自己的 IP（172.16.19.3）和端口（26579）发布到“__sentinel__:hello”频道上，哨兵 2 和 3 订阅了该频道
			那么此时，哨兵 2 和 3 就可以从这个频道直接获取哨兵 1 的 IP 地址和端口号
			然后，哨兵 2、3 可以和哨兵 1 建立网络连接。通过这个方式，哨兵 2 和 3 也可以建立网络连接，这样一来，哨兵集群就形成了
		通信
			它们相互间可以通过网络连接进行通信，比如说对主库有没有下线这件事儿进行判断和协商哨兵除了彼此之间建立起连接形成集群外，还需要和从库建立连接
			这是因为，在哨兵的监控任务中，它需要对主从库都进行心跳判断，而且在主从库切换完成后，它还需要通知从库，让它们和新主库进行同步
	哨兵是如何知道从库的 IP 地址和端口的呢？
		哨兵向主库发送 INFO 命令，图示 08.sentinel_cluster_info.jpg
		哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵
		接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控
		哨兵 1 和 3 可以通过相同的方法和从库建立连接
		哨兵通过 INFO 命令，获得了从库连接信息，也能和从库建立连接，并进行监控了
	客户端
		主从库切换后，客户端也需要知道新主库的连接信息，才能向新主库发送请求操作
		所以，哨兵还需要完成把新主库的信息告诉客户端这个任务
		如何在客户端通过监控了解哨兵进行主从切换的过程呢？比如说，主从切换进行到哪一步了？
		此时，仍然可以依赖 pub/sub 机制，来帮助我们完成哨兵和客户端间的信息同步
基于 pub/sub 机制的客户端事件通知
	哨兵 & pub/sub
		从本质上说，哨兵就是一个运行在特定模式下的 Redis 实例，只不过它并不服务请求操作，只是完成监控、选主和通知的任务
		所以，每个哨兵实例也提供 pub/sub 机制，客户端可以从哨兵订阅消息
		哨兵提供的消息订阅频道有很多，不同频道包含了主从库切换过程中的不同关键事件
	重要频道
		可以让客户端从哨兵这里订阅消息，图示 08.sentinel_cluster_pub_sub.jpg
		具体操作步骤是，客户端读取哨兵的配置文件后，可以获得哨兵的地址和端口，和哨兵建立网络连接
		然后，我们可以在客户端执行订阅命令，来获取不同的事件消息
		示例：
		订阅“所有实例进入客观下线状态的事件”
			SUBSCRIBE +odown
		订阅所有的事件
			PSUBSCRIBE *
		当哨兵把新主库选择出来后，客户端就会看到下面的 switch-master 事件
			switch-master <master name> <oldip> <oldport> <newip> <newport>
			这个事件表示主库已经切换了，新主库的 IP 地址和端口信息已经有了
			这个时候，客户端就可以用这里面的新主库地址和端口进行通信了
	更多好处
		有了这些事件通知，客户端不仅可以在主从切换后得到新主库的连接信息，还可以监控到主从库切换过程中发生的各个重要事件
		这样，客户端就可以知道主从切换进行到哪一步了，有助于了解切换进度

由哪个哨兵执行主从切换？
	“投票仲裁”
		确定由哪个哨兵执行主从切换的过程，和主库“客观下线”的判断过程类似，也是一个“投票仲裁”的过程
	主库“主观下线”判断过程：07.sentinel.go 介绍了判断“客观下线”的原则
		任何一个实例只要自身判断主库“主观下线”后，就会给其他实例发送 is-master-downby-addr 命令
		接着，其他实例会根据自己和主库的连接情况，做出 Y 或 N 的响应，Y 相当于赞成票，N 相当于反对票
		一个哨兵获得了仲裁所需的赞成票数后，就可以标记主库为“客观下线”
		这个所需的赞成票数是通过哨兵配置文件中的 quorum 配置项设定的
			例如，现在有 5 个哨兵，quorum 配置的是 3，那么，一个哨兵需要 3 张赞成票，就可以标记主库为“客观下线”了
			这 3 张赞成票包括哨兵自己的一张赞成票和另外两个哨兵的赞成票
		图示 08.sentinel_cluster_judge.jpg
	哨兵“Leader 选举”
		此时，这个哨兵就可以再给其他哨兵发送命令，表明希望由自己来执行主从切换，并让所有其他哨兵进行投票
		这个投票过程称为“Leader 选举”。因为最终执行主从切换的哨兵称为 Leader，投票过程就是确定 Leader
	成为 Leader 条件
		第一，拿到半数以上的赞成票
		第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值
	示例
		08.sentinel_cluster_leader.jpg
		在 T1 时刻，S1 判断主库为“客观下线”，它想成为 Leader，就先给自己投一张赞成票，然后分别向 S2 和 S3 发送命令，表示要成为 Leader
		在 T2 时刻，S3 判断主库为“客观下线”，它也想成为 Leader，所以也先给自己投一张赞成票，再分别向 S1 和 S2 发送命令，表示要成为 Leader
		在 T3 时刻，S1 收到了 S3 的 Leader 投票请求
			因为 S1 已经给自己投了一票 Y，所以它不能再给其他哨兵投赞成票了，所以 S1 回复 N 表示不同意
			同时，S2 收到了 T2 时 S3 发送的 Leader 投票请求
			因为 S2 之前没有投过票，它会给第一个向它发送投票请求的哨兵回复 Y，给后续再发送投票请求的哨兵回复 N
			所以，在 T3 时，S2 回复 S3，同意 S3 成为 Leader
		在 T4 时刻，S2 才收到 T1 时 S1 发送的投票命令
			因为 S2 已经在 T3 时同意了 S3 的投票请求，此时，S2 给 S1 回复 N，表示不同意 S1 成为 Leader
			发生这种情况，是因为 S3 和 S2 之间的网络传输正常，而 S1 和 S2 之间的网络传输可能正好拥塞了，导致投票请求传输慢了
		在 T5 时刻，S1 得到的票数是来自它自己的一票 Y 和来自 S2 的一票 N。而 S3 除了自己的赞成票 Y 以外，还收到了来自 S2 的一票 Y
			此时，S3 不仅获得了半数以上的 Leader 赞成票，也达到预设的 quorum 值（quorum 为 2），所以它最终成为了 Leader
			接着，S3 会开始执行选主操作，而且在选定新主库后，会给其他从库和客户端通知新主库的信息
		选举失败：
			如果 S3 没有拿到 2 票 Y，那么这轮投票就不会产生 Leader。哨兵集群会等待一段时间（也就是哨兵故障转移超时时间的 2 倍），再重新选举
			这是因为，哨兵集群能够进行成功投票，很大程度上依赖于选举命令的正常网络传播
			如果网络压力较大或有短时堵塞，就可能导致没有一个哨兵能拿到半数以上的赞成票。所以，等到网络拥塞好转之后，再进行投票选举，成功的概率就会增加
	至少 3 个哨兵
		需要注意的是，如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票
		所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的
		因此，通常我们至少会配置 3 个哨兵实例。这一点很重要，你在实际应用时可不能忽略了

小结
	在解决一个系统问题的时候，会引入一个新机制，或者设计一层新功能，比如：
		为了实现主从切换，我们引入了哨兵
		为了避免单个哨兵故障后无法进行主从切换，以及为了减少误判率，又引入了哨兵集群
		哨兵集群又需要有一些机制来支撑它的正常运行
	支持哨兵集群的关键机制
		基于 pub/sub 机制的哨兵集群组成过程
		基于 INFO 命令的从库列表，这可以帮助哨兵和从库建立连接
		基于哨兵自身的 pub/sub 功能，这实现了客户端和哨兵之间的事件通知
	重要经验
		要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds
		“坑”，在项目中，因为这个值在不同的哨兵实例上配置不一致，导致哨兵集群一直没有对有故障的主库形成共识，也就没有及时切换主库
		最终的结果就是集群服务不稳定

思考
	假设有一个 Redis 集群，是“一主四从”，同时配置了包含 5 个哨兵实例的集群，quorum 值设为 2
	在运行过程中，如果有 3 个哨兵实例都发生故障了，此时，Redis 主库如果有故障
	还能正确地判断主库“客观下线”吗？如果可以的话，还能进行主从库自动切换吗？
	此外，哨兵实例是不是越多越好呢，如果同时调大 down-after-milliseconds值，对减少误判是不是也有好处呢？

补充
	示例 08.sentinel_cluster_leader.jpg
		1.要发生S1、S2和S3同时同自己投票的情况，这需要这三个哨兵基本同时判定了主库客观下线
			但是，不同哨兵的网络连接、系统压力不完全一样，接收到下线协商消息的时间也可能不同
			所以，它们同时做出主库客观下线判定的概率较小，一般都有个先后关系
			例子中，就是S1、S3先判定，S2一直没有判定
		2.哨兵对主从库进行的在线状态检查等操作，是属于一种时间事件，用一个定时器来完成，一般来说每100ms执行一次这些事件
			每个哨兵的定时器执行周期都会加上一个小小的随机时间偏移
			目的是让每个哨兵执行上述操作的时间能稍微错开些，也是为了避免它们都同时判定主库下线，同时选举Leader
		3.即使出现了都投给自己一票的情况，导致无法选出Leader，哨兵会停一段时间（一般是故障转移超时时间failover_timeout的2倍）
			然后再可以进行下一轮投票
	只投一次票
		哨兵如果没有给自己投票，就会把票投给第一个给它发送投票请求的哨兵
		后续再有投票请求来，哨兵就拒接投票了








*/
